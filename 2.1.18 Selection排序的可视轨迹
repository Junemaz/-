import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdRandom;

public class Selection {
    public static void sort(Comparable[] a) {
        //将a[]按升序排列
        int N = a.length;    //数组长度
        for (int i = 0; i < N; i++) {//将a[i]与a[i+1..N]中最小的元素交换
            int min = i;      //最小元素的索引
            for (int j = i + 1; j < N; j++)
                if (less(a[j], a[min])) min = j;
            show(a, i, min);
            exch(a, i, min);

/*        for (int i = 1; i < N; i++) {
            for (int j = i; j > 0 && less(a[j], a[j - 1]); j--)
                exch(a, j, j - 1);*/
        }
    }


    private static boolean less(Comparable v, Comparable w) {
        return v.compareTo(w) < 0;
    }

    private static void exch(Comparable[] a, int i, int j) {
        Comparable t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    private static void show(Comparable[] a, int i, int min) {//在单行中打印数组
//        for (int i = 0; i < a.length; i++)
//            StdOut.print(a[i] + " ");
//        StdOut.println();
        StdDraw.clear();
        int N = a.length;
        StdDraw.setPenColor(StdDraw.GRAY);
        for (int j = 0; j < i; j++) {
            Double x = 1.0 * j / N;
            Double y = (Double) a[j] / 2.0;
            Double rw = 0.5 / N;
            Double rh = (Double) a[j] / 2.0;
            StdDraw.filledRectangle(x, y, rw, rh);
        }

        StdDraw.setPenColor(StdDraw.BLACK);
        for (int j = i; j < min; j++) {
            Double x = 1.0 * j / N;
            Double y = (Double) a[j] / 2.0;
            Double rw = 0.5 / N;
            Double rh = (Double) a[j] / 2.0;
            StdDraw.filledRectangle(x, y, rw, rh);
        }

        StdDraw.setPenColor(StdDraw.RED);
        Double x1 = 1.0 * min / N;
        Double y1 = (Double) a[min] / 2.0;
        Double rw1 = 0.5 / N;
        Double rh1 = (Double) a[min] / 2.0;
        StdDraw.filledRectangle(x1, y1, rw1, rh1);

        StdDraw.setPenColor(StdDraw.BLACK);
        for (int j = min + 1; j < N; j++) {
            Double x = 1.0 * j / N;
            Double y = (Double) a[j] / 2.0;
            Double rw = 0.5 / N;
            Double rh = (Double) a[j] / 2.0;
            StdDraw.filledRectangle(x, y, rw, rh);
        }
        StdDraw.pause(500);
    }

    public static boolean isSorted(Comparable[] a) {//测试数组元素是否有序
        for (int i = 1; i < a.length; i++)
            if (less(a[i], a[i - 1])) return false;
        return true;
    }

    public static void main(String[] args) {
        //String[] a = {"bed", "bug", "dad", "yes", "zoo", "...", "all", "bad", "yet"};
        //String[] a = StdIn.readStrings();
        //Integer[] a = {0, 1, 2, 3, 4, 5, 5, 1, 2, 4};
        int N = 50;
        Double[] a = new Double[N];
        for (int i = 0; i < N; i++)
            a[i] = StdRandom.random();
        sort(a);
        //assert isSorted(a);
        //show(a);
    }
}

