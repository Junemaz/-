import edu.princeton.cs.algs4.StdOut;

import java.util.Arrays;

public class Shell {
    public static void sort(Comparable[] a) {//将a[]按升序排列
        int N = a.length;
        int h = 1;
        while (h < N / 3) h = 3 * h + 1;
        while (h >= 1) {//将数组变为h有序
            for (int i = h; i < N; i++) {//将a[i]插入到a[i-h]，a[i-2*h]，a[i-3*h]...之中
                for (int j = i; j >= h && less(a[j], a[j - h]); j -= h)
                    exch(a, j, j - h);
            }
            h = h / 3;
        }
    }

    public static boolean check(Comparable[] a) {
        Comparable[] clone = new Comparable[a.length];
        for (int i = 0; i < a.length; i++) {
            clone[i] = a[i];
        }
        sort(a);
        Arrays.sort(clone);
        show(a);
        show(clone);
        for (int i = 0; i < a.length; i++) {
            if (a[i] != clone[i])
                return false;
        }
        return true;
    }

    private static boolean less(Comparable v, Comparable w) {
        return v.compareTo(w) < 0;
    }

    private static void exch(Comparable[] a, int i, int j) {
        Comparable t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    private static void show(Comparable[] a) {//在单行中打印数组
        for (int i = 0; i < a.length; i++)
            StdOut.print(a[i] + " ");
        StdOut.println();
    }

    public static boolean isSorted(Comparable[] a) {//测试数组元素是否有序
        for (int i = 1; i < a.length; i++)
            if (less(a[i], a[i - 1])) return false;
        return true;
    }

    public static void main(String[] args) {
        String[] a = {"bed", "bug", "dad", "yes", "zoo", "...", "all", "bad", "yet"};
        //String[] a = StdIn.readStrings();
        boolean d = false;
        d = check(a);
        if (d) StdOut.printf("true");
        else StdOut.printf("false");
        //Integer[] a = {0, 1, 2, 3, 4, 5, 5, 1, 2, 4};
        //sort(a);
        //assert isSorted(a);
    }
}
